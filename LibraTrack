-- start

select * from books;
select * from branch;
select * from employees;
select * from issued_status;
select * from members;
select * from return_status;

-- Project Task

-- Task 1. Create a New Book Record -- "978-1-60129-456-2', 'To Kill a Mockingbird', 'Classic', 6.00, 'yes', 'Harper Lee', 'J.B. Lippincott & Co.')"
INSERT INTO books(isbn, book_title, category, rental_price, status, author, publisher)
VALUES('978-1-60129-456-2', 'To Kill a Mockingbird', 'Classic', 6.00, 'yes', 'Harper Lee', 'J.B. Lippincott & Co.');
SELECT * FROM books;

-- Task 2: Update an Existing Member's Address
update members
set member_address = '125 main st'
where member_id = 'c101';
select * from members;

-- Task 3: Delete a Record from the Issued Status Table -- Objective: Delete the record with issued_id = 'IS121' from the issued_status table.
select * from issued_status
where issued_id = 'IS121';

delete from issued_status
where issued_id = 'IS121';

-- Task 4: Retrieve All Books Issued by a Specific Employee -- Objective: Select all books issued by the employee with emp_id = 'E101'.
select * from issued_status
where issued_emp_id = 'E101';

-- Task 5: List Members Who Have Issued More Than One Book -- Objective: Use GROUP BY to find members who have issued more than one book.
select 
	issued_emp_id, count(*)
	from issued_status
group by 1
having count(*) > 1;

-- CTAS
-- Task 6: Create Summary Tables: Used CTAS to generate new tables based on query results - each book and total book_issued_cnt**
create table book_cnts
as
select 
	b.isbn,
	b.book_title,
	count(ist.issued_id) as no_issued
from books as b
join
issued_status as ist
on ist.issued_book_isbn = b.isbn
group by 1, 2;

select * from book_cnts;

-- Task 7. Retrieve All Books in a Specific Category:
SELECT * FROM books
WHERE category = 'Classic';

-- Task 8: Find Total Rental Income by Category:
select
	b.category,
	sum(b.rental_price),
	count(*)
from issued_status ist
join 
books b
on b.isbn = ist.issued_book_isbn
group by 1;

-- Task 9: List Members Who Registered in the Last 180 Days:
SELECT * FROM members
WHERE reg_date >= CURRENT_DATE - INTERVAL '180 days';

insert into members(member_id, member_name, member_address, reg_date)
values
('C118', 'sam', '145 Main St', '2024-06-01'),
('C119', 'john', '135 Main St', '2024-05-01');

-- Task 10: List Employees with Their Branch Manager's Name and their branch details:
SELECT 
    e1.emp_id,
    e1.emp_name,
    e1.position,
    e1.salary,
    b.*,
    e2.emp_name as manager
FROM employees as e1
JOIN 
branch as b
ON e1.branch_id = b.branch_id    
JOIN
employees as e2
ON e2.emp_id = b.manager_id

-- Task 11: Create a Table of Books with Rental Price Above a Certain Threshold:
create table expensive_books as
select * from books
where rental_price > 7.00;

-- Task 12: Retrieve the List of Books Not Yet Returned
select * from issued_status as ist
left join 
return_status as rs
on rs.issued_id = ist.issued_id
where rs.return_id is null;

/*Task 13: Identify Members with Overdue Books. 
Write a query to identify members who have overdue books (assume a 30-day return period). Display the member's_id, member's name, book title, issue date, and days overdue.
*/
select 
	ist.issued_member_id,
	m.member_name,
	bk.book_title,
	ist.issued_date,
	-- rs.return_date,
	'2024-08-24'::DATE - ist.issued_date as over_dues_days
from issued_status as ist
join 
members as m
	on m.member_id = ist.issued_member_id
join
books as bk
	on bk.isbn = ist.issued_book_isbn
left join 
return_status as rs
	on rs.issued_id = ist.issued_id
where rs.return_date is null
	and ('2024-08-24'::DATE - ist.issued_date) > 30
order by 1;

/*Task 14: Update Book Status on Return
 Write a query to update the status of books in the books table to "Yes" when they are returned (based on entries in the return_status table).
*/
select * from issued_status
where issued_book_isbn = '978-0-451-52994-2';

select * from books
where isbn	= '978-0-451-52994-2';

update books
set status = 'no'
where isbn = '978-0-451-52994-2';

select * from return_status
where issued_id = 'IS130';

--
insert into return_status(return_id, issued_id, return_date)
values
('RS125', 'IS130', '2024-08-24'::DATE);
select * from return_status
where issued_id = 'IS130';

update books
set status = 'yes'
where isbn = '978-0-451-52994-2';
select * from return_status
where issued_id = 'IS130';

-- Stores Procedures
CREATE OR REPLACE PROCEDURE add_return_records(p_return_id VARCHAR(10), p_issued_id VARCHAR(10))
LANGUAGE plpgsql
AS $$

DECLARE
    v_isbn VARCHAR(50);
    v_book_name VARCHAR(80);
    
BEGIN
    -- all your logic and code
    -- inserting into returns based on users input
    INSERT INTO return_status(return_id, issued_id, return_date)
    VALUES
    (p_return_id, p_issued_id, CURRENT_DATE);

    SELECT 
        issued_book_isbn,
        issued_book_name
        INTO
        v_isbn,
        v_book_name
    FROM issued_status
    WHERE issued_id = p_issued_id;

    UPDATE books
    SET status = 'yes'
    WHERE isbn = v_isbn;

    RAISE NOTICE 'Thank you for returning the book: %', v_book_name;
    
END;
$$


-- Testing FUNCTION add_return_records

issued_id = IS135
ISBN = WHERE isbn = '978-0-307-58837-1'

SELECT * FROM books
WHERE isbn = '978-0-307-58837-1';

SELECT * FROM issued_status
WHERE issued_book_isbn = '978-0-307-58837-1';

SELECT * FROM return_status
WHERE issued_id = 'IS135';

-- calling function 
CALL add_return_records('RS138', 'IS135');

-- calling function 
CALL add_return_records('RS148', 'IS140');

/*Task 15: Branch Performance Report
Create a query that generates a performance report for each branch, showing the number of books issued, the number of books returned, and the total revenue generated from book rentals.
*/

create table branch_reports
as
select 
	b.branch_id, 
	b.manager_id,
	count(ist.issued_id) as number_book_issued,
	count(rs.return_id) as number_of_book_return,
	sum(bk.rental_price) as total_revenue
from issued_status as ist
join 
employees as e
on e.emp_id = ist.issued_emp_id
join
branch as b
on e.branch_id = b.branch_id
left join
return_status as rs
on rs.issued_id = ist.issued_id
join
books as bk
on ist.issued_book_isbn = bk.isbn
group by 1, 2;

select * from branch_reports;


/*Task 16: CTAS: Create a Table of Active Members
Use the CREATE TABLE AS (CTAS) statement to create a new table active_members containing members who have issued at least one book in the last 6 months.
*/

create table active_members
as
select * from members
where member_id in (select 	
						distinct issued_member_id
					from issued_status
					where 
						issued_date >= '2024-08-24'::DATE - interval '6 month'
					)
;


select * from active_members;

-- end
